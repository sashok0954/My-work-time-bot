import telebot
from telebot import types
import datetime
import json
import os
import threading
import time

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = '8366827952:AAFmKlK25NXnrQZCveTi0P-s4F0hiJTBHDw
'
USER_ID = 333545967  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

bot = telebot.TeleBot(TOKEN)
DATA_FILE = 'work_data.json'

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö ===
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r') as f:
        work_data = json.load(f)
else:
    work_data = {}

def save_data():
    with open(DATA_FILE, 'w') as f:
        json.dump(work_data, f)

# === –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
@bot.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
def handle_stats(message):
    if message.from_user.id != USER_ID:
        return
    now = datetime.datetime.now()
    current_month = now.strftime("%Y-%m")
    total_ot = 0
    total_phd = 0

    for date, entry in work_data.items():
        if date.startswith(current_month):
            total_ot += entry.get("–ø–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∞", 0)
            total_phd += entry.get("–ü–•–î", 0)

    response = f"üìä –ó–∞ {now.strftime('%B')}:\nüîπ –ü–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∞: {total_ot} –≥–æ–¥\nüîπ –ü–•–î: {total_phd} –≥–æ–¥"
    bot.send_message(USER_ID, response)

# === –ú–µ–Ω—é ===
@bot.message_handler(commands=['–º–µ–Ω—é'])
def menu(message):
    if message.from_user.id != USER_ID:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    item2 = types.KeyboardButton("–í–Ω–µ—Å—Ç–∏ –≥–æ–¥–∏–Ω–∏")
    markup.add(item1, item2)
    bot.send_message(USER_ID, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

# === –ü—Ä–∏–π–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–≤–µ—á–µ—Ä—ñ ===
@bot.message_handler(func=lambda message: message.from_user.id == USER_ID)
def handle_time_entry(message):
    try:
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –±—É–ª–∏ –≤–≤–µ–¥–µ–Ω—ñ –≥–æ–¥–∏–Ω–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        if today in work_data:
            bot.send_message(USER_ID, "‚ö†Ô∏è –í–∏ –≤–∂–µ –≤–≤–µ–ª–∏ –≥–æ–¥–∏–Ω–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")
            return

        # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        parts = message.text.strip().split()
        if len(parts) < 1:
            bot.send_message(USER_ID, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –ù–∞–ø–∏—à—ñ—Ç—å —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (–§–æ—Ä–º–∞—Ç: 19:30) —Ç–∞ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –ü–•–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 19:30 2).")
            return

        end_time_str = parts[0]
        phd_hours = float(parts[1]) if len(parts) > 1 else 0

        end_time = datetime.datetime.strptime(end_time_str, "%H:%M")
        end_datetime = datetime.datetime.combine(datetime.datetime.now().date(), end_time.time())

        end_hour = end_datetime.hour + end_datetime.minute / 60
        overtime = max(0, round(end_hour - 17, 2))

        work_data[today] = {
            "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è": end_time_str,
            "–ø–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∞": overtime,
            "–ü–•–î": phd_hours
        }
        save_data()

        bot.send_message(USER_ID, f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {overtime} –≥–æ–¥ –ø–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∏, {phd_hours} –≥–æ–¥ –ü–•–î.")
    except Exception as e:
        bot.send_message(USER_ID, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –§–æ—Ä–º–∞—Ç: 19:30 2")

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ===
def daily_reminder():
    while True:
        now = datetime.datetime.now()
        if now.hour == 22 and now.minute == 0:
            bot.send_message(USER_ID, "üëã –ü—Ä–∏–≤—ñ—Ç! –ö–æ–ª–∏ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–∫—ñ–Ω—á–∏–≤ —Ä–æ–±–æ—Ç—É? –Ü —Å–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω –±—É–ª–æ –ü–•–î?\n(–§–æ—Ä–º–∞—Ç: 19:30 2)")
            time.sleep(60)  # —â–æ–± –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º —Ö–≤–∏–ª–∏–Ω–∏
        time.sleep(30)

# === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É ===
def monthly_report():
    while True:
        now = datetime.datetime.now()
        if now.day == 1 and now.hour == 9 and now.minute == 0:
            last_month = (now.replace(day=1) - datetime.timedelta(days=1)).strftime("%Y-%m")
            total_ot = 0
            total_phd = 0

            for date, entry in work_data.items():
                if date.startswith(last_month):
                    total_ot += entry.get("–ø–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∞", 0)
                    total_phd += entry.get("–ü–•–î", 0)

            bot.send_message(USER_ID, f"üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ {last_month}:\nüîπ –ü–µ—Ä–µ—Ä–æ–±—ñ—Ç–∫–∞: {total_ot} –≥–æ–¥\nüîπ –ü–•–î: {total_phd} –≥–æ–¥")
            time.sleep(60)
        time.sleep(30)

# === –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤ ===
threading.Thread(target=daily_reminder, daemon=True).start()
threading.Thread(target=monthly_report, daemon=True).start()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()
